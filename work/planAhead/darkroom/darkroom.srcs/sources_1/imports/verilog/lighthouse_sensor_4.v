/*
   This file was generated automatically by the Mojo IDE version B1.3.5.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

/*
   Parameters:
     ID = 0
*/
module lighthouse_sensor_4 (
    input signal,
    input signal_inverted,
    input [31:0] timer,
    input rst,
    output reg sweep_detected,
    output reg [31:0] value
  );
  
  localparam ID = 1'h0;
  
  
  wire [1-1:0] M_rising_edge_out;
  reg [1-1:0] M_rising_edge_in;
  edge_detector_11 rising_edge (
    .clk(signal),
    .in(M_rising_edge_in),
    .out(M_rising_edge_out)
  );
  wire [1-1:0] M_falling_edge_out;
  reg [1-1:0] M_falling_edge_in;
  edge_detector_12 falling_edge (
    .clk(signal),
    .in(M_falling_edge_in),
    .out(M_falling_edge_out)
  );
  
  reg [31:0] M_t_0_d, M_t_0_q = 1'h0;
  
  reg [31:0] M_t_sweep_start_d, M_t_sweep_start_q = 1'h0;
  
  reg [31:0] M_t_sweep_duration_d, M_t_sweep_duration_q = 1'h0;
  
  reg data;
  
  reg rotor;
  
  reg lighthouse;
  
  reg [31:0] M_start_valid_sync_d, M_start_valid_sync_q = 1'h0;
  
  reg [31:0] M_stop_valid_sync_d, M_stop_valid_sync_q = 1'h0;
  
  reg [31:0] duration;
  
  reg [31:0] sync_gap_duration;
  
  always @* begin
    M_t_0_d = M_t_0_q;
    M_t_sweep_start_d = M_t_sweep_start_q;
    M_start_valid_sync_d = M_start_valid_sync_q;
    M_t_sweep_duration_d = M_t_sweep_duration_q;
    M_stop_valid_sync_d = M_stop_valid_sync_q;
    
    M_rising_edge_in = signal;
    M_falling_edge_in = signal;
    data = 1'h0;
    rotor = 1'h0;
    lighthouse = 1'h0;
    sweep_detected = 1'h0;
    if (M_rising_edge_out) begin
      M_t_0_d = timer;
    end else begin
      if (M_falling_edge_out) begin
        duration = timer - M_t_0_q;
        if (duration < 9'h1f4) begin
          M_t_sweep_duration_d = M_t_0_q - M_t_sweep_start_q;
          sweep_detected = 1'h1;
        end else begin
          if (duration > 11'h244 && duration < 11'h3de) begin
            M_t_sweep_start_d = M_t_0_q;
            if (M_start_valid_sync_q == 1'h0) begin
              M_start_valid_sync_d = M_t_0_q;
            end else begin
              if (M_start_valid_sync_q != 1'h0 && M_stop_valid_sync_q == 1'h0) begin
                M_stop_valid_sync_d = M_t_0_q;
              end
            end
          end
        end
        if ((M_start_valid_sync_q > 1'h0) && (M_stop_valid_sync_q > 1'h0)) begin
          sync_gap_duration = M_stop_valid_sync_q - M_start_valid_sync_q;
          M_start_valid_sync_d = M_t_0_q;
          M_stop_valid_sync_d = 1'h0;
          if ((sync_gap_duration - 17'h14582) > 10'h3e8) begin
            lighthouse = 1'h1;
          end else begin
            if ((sync_gap_duration - 17'h14582) < $signed(11'h418)) begin
              lighthouse = 1'h0;
            end
          end
        end
        if ((duration > 11'h244 && duration < 11'h2a8) || (duration > 12'h3de && duration < 12'h442)) begin
          rotor = 1'h0;
          data = 1'h0;
        end else begin
          if ((duration > 11'h2a8 && duration < 11'h30c) || (duration > 12'h44c && duration < 12'h4b0)) begin
            rotor = 1'h1;
            data = 1'h0;
          end else begin
            if ((duration > 11'h30c && duration < 11'h370) || (duration > 12'h4b0 && duration < 12'h514)) begin
              rotor = 1'h0;
              data = 1'h1;
            end else begin
              if ((duration > 11'h37a && duration < 11'h3de) || (duration > 12'h514 && duration < 12'h578)) begin
                rotor = 1'h1;
                data = 1'h1;
              end
            end
          end
        end
        if (M_t_sweep_duration_q < 17'h14000 && M_t_sweep_duration_q > 1'h0) begin
          value[12+0-:1] = 1'h0;
        end else begin
          value[12+0-:1] = 1'h1;
        end
        value[0+8-:9] = 1'h0;
        value[9+0-:1] = lighthouse;
        value[10+0-:1] = rotor;
        value[11+0-:1] = data;
        value[13+18-:19] = M_t_sweep_duration_q[0+18-:19];
      end
    end
  end
  
  always @(posedge signal_inverted) begin
    if (rst == 1'b1) begin
      M_start_valid_sync_q <= 1'h0;
    end else begin
      M_start_valid_sync_q <= M_start_valid_sync_d;
    end
  end
  
  
  always @(posedge signal_inverted) begin
    if (rst == 1'b1) begin
      M_t_sweep_start_q <= 1'h0;
    end else begin
      M_t_sweep_start_q <= M_t_sweep_start_d;
    end
  end
  
  
  always @(posedge signal_inverted) begin
    if (rst == 1'b1) begin
      M_t_sweep_duration_q <= 1'h0;
    end else begin
      M_t_sweep_duration_q <= M_t_sweep_duration_d;
    end
  end
  
  
  always @(posedge signal) begin
    if (rst == 1'b1) begin
      M_t_0_q <= 1'h0;
    end else begin
      M_t_0_q <= M_t_0_d;
    end
  end
  
  
  always @(posedge signal_inverted) begin
    if (rst == 1'b1) begin
      M_stop_valid_sync_q <= 1'h0;
    end else begin
      M_stop_valid_sync_q <= M_stop_valid_sync_d;
    end
  end
  
endmodule
