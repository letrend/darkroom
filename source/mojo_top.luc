module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    input sensor,            // lighthouse sensor input
    output esp_tx,
    input esp_rx,
    output data_available
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    
    .rst(rst){
      // the avr_interface module is used to talk to the AVR for access to the USB port and analog pins
      avr_interface avr;
      dff data[8]; // flip-flops to store last character
    }
  }

  clock10MHz clock_10MHz(.clk_in(clk)); 

  counter timer(#SIZE(32), .clk(clock_10MHz.clk_out), .rst(rst)); // 32-bit timer 
  
  lighthouse_sensor sensor0(#ID(0), .signal(sensor), .signal_inverted(~sensor), .rst(rst), .timer(timer.value));
  
  uart_tx esp_transmit(#BAUD(115200), .clk(clk), .rst(rst), .block(rst));
  uart_rx esp_receive(#BAUD(115200), .clk(clk), .rst(rst));

  dff counter[3](.clk(clk), .rst(rst));
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    // connect inputs of avr
    avr.cclk = cclk;
    avr.spi_ss = spi_ss;
    avr.spi_mosi = spi_mosi;
    avr.spi_sck = spi_sck;
    avr.rx = avr_tx;
    avr.channel = hf;           // ADC is unused so disable
    avr.tx_block = avr_rx_busy; // block TX when AVR is busy
    
    // connect outputs of avr
    spi_miso = avr.spi_miso;
    spi_channel = avr.spi_channel;
    avr_rx = avr.tx;
    
    avr.new_tx_data = 1;
    avr.new_tx_data = 0;
    avr.tx_data = 0;
    
    
    esp_tx = esp_transmit.tx;
    esp_receive.rx = esp_rx;    
    
    
    esp_transmit.data = 0;
    esp_transmit.new_data = 0;
    
    data_available = 0;
    
    if (timer.value[24] && counter.q < 4 ){ // if new data and not all data was sent
      data_available = 1;
      if(!esp_transmit.busy){ // if data previous data was sent
        case (counter.q){
            0: esp_transmit.data = "A";// sensor0.value[7:0];
            1: esp_transmit.data = "B";// sensor0.value[15:8];
            2: esp_transmit.data = "C";// sensor0.value[23:16];
            3: esp_transmit.data = "D";// sensor0.value[31:24];
        }
        esp_transmit.new_data = 1;
        counter.d = counter.q + 1;
      }
    }else if(!timer.value[24] && counter.q >= 4){
       data_available = 0;
       counter.d = 0; 
    }else{
       data_available = 1; 
    }
    
    led = timer.value[29:23]; // connect the LEDs to our flip-flop
  }
}